plugins {
    id "base"
    id "com.github.node-gradle.node" version "7.0.1"
}

// configurations on which versions of Node, Npm, and Yarn the gradle build should use.  Configuration provided by/to
// the gradle node plugin that"s applied above (com.moowork.node)
node {
    version = "20.11.0"
    yarnVersion = "1.22.19"
    npmVersion = "10.2.4"
    download = true
    nodeProjectDir  = file(project.projectDir)
    distBaseUrl = null  // Base URL is configured in settings.gradle.kts
}

task npmPackages(type: NpmTask) {
    args = ["install"]

    inputs.files(
        fileTree(project.projectDir).matching {
            include("**/package.json")
        })

    dependsOn("${project.path}:npmSetup")
}

// define a gradle task that executes an npm script (defined in the package.json).
task buildBundles(type: NpmTask) {
    group "Web Build Tasks"
    description "Runs 'npm run build', executing the build script of the project root's package.json"

    // same as running "npm run build" in the ./web/ directory.
    args = ["run", "build"]

    // we require the installPackages to be done before the npm build (which calls webpack) can run, as we need our dependencies!
    dependsOn(npmPackages)

    // we should re-run this task on consecutive builds if we detect changes to any non-generated files, so here we
    // define that we wish to have all files -- except those excluded -- as input dependencies for this task.
    inputs.files(project.fileTree("packages").matching {
        exclude("**/node_modules/**", "**/dist/**")
    }.toList())

//    // the outputs of this task include where we place the final files for use in the module, as well as the local
//    // temporary "dist" folders.  Defining these outputs gives the build enough awareness to avoid running this
//    // task if it"s already been executed, the outputs are where they are expected, and there have been no changes to
//    // inputs.
//    outputs.files(fileTree("${project.parent?.projectDir}/gateway/src/main/resources/mounted"))
}

project.tasks.findByName("build").dependsOn(buildBundles)

//// task to delete the dist folders
//task deleteDistFolders(type: Delete) {
//    delete(file("packages/designer/dist/"))
//    delete(file("packages/client/dist/"))
//}

//// task to delete the output files from the gateway resources folder.
//task deleteGwJs(type: Delete) {
//    delete fileTree(mountedJsDir) { include("**/*.js", "**/*.js.map") }
//}

//// makes the "built in" clean task execute the deletion tasks
//clean.dependsOn(deleteDistFolders, deleteGwJs)

task deepClean() {
    doLast {
        delete(file("packages/designer/node_modules"))
        delete(file("packages/designer/.gradle"))
        delete(file("packages/client/node_modules"))
        delete(file("packages/client/.gradle"))
        delete(file(".gradle"))
        delete(file("node_modules"))
    }

    dependsOn clean
}